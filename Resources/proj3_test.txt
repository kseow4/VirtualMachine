
#Find and set PC to address of Main().
	#	LDR		R1		Main
	#	MOV		PC		R1
		
	#	LDA		PC		Main

# So it looks like I test first - and then save the space for the function

		MOV		R2		SP			# Testing for overflow (SP < SL)
		ADI		R2		-8			# 'adjust for space needed (Return Address & PFP)
		CMP		R2		SL			# if (SP = SL) ? 0. (SP > SL) ? +1. (SP < SL) ? -1.
		BLT		R2		OVERFLOW


#creating activation record for opd	-- and invoke opd()
opd_AR	MOV		R2		FP				#save FP in R2, this will be the PFP
		MOV		FP		SP
		# .......!
		ADI		SP		-4		# for return address
		STR		R2		SP		# PFP to top of stack (PFP = FP)
		ADI		SP		-4		# adjust stack pointer for PFP.
		# .......!
		MOV		R1		PC		# PC incremented by 1 instruction
		# .......! (PC)
		ADI		R1		6		# Compute return address -- [Always a fixed amount!!]
# (PC +2)
		STR		R1		FP		# return address to the BEGINNING of the Frame!
# (PC +4)
		JMP		opd_AR	#	<<<----	Call Function opd_AR()
# (PC +6)
#		.....	instruction where we return .... ?





# can I just subtract 8 instead of 4 2x for the return address and PFP?
#		MOV		R2		FP
#		MOV		FP		SP
#		ADI		SP		-8
#		STR		R2		SP
# ** ** ** ** ** ** ** ** ** **

#	DE-ALLOCATION an Activation Record (aka Stack Frame) occurs as part of the RETURN STATEMENT.

#	-> set pointers as follows:
#		☼ SP = FP
#		☼ FP = PFP
#		
#		☼ ->Test for Stack Underflow again<-
#		☼ Retrieve the return address from the stack
#		........!
#		☼ Place a RETURN VALUE on the TOP of the stack AFTER De-Allocating the frame.
#				••• DO NOT adjust the SP for the return value •
#
#		☼ Jump to the return address...

#
#		•••NOTICE•••
#	No popping of individial elements on the stack ---  Just manipulate the registers or variables for SP and FP directly!!!
#

### Fixed Length 2-Byte Instructions::
#		(classical 5 stage pipeline)
#		(address size (integer) = 4-Bytes)

#	1.	Test for UNDERFLOW -- (SP > SB)

		MOV		SP		FP			# De-allocate current activation record.. (SP = FP)
		MOV		R2		SP
		CMP		R2		SB			# results: (SP = SB) => 0.  (SP > SB) => +1.  (SP < SB) => -1.
		BGT		R2		UNDERFLOW

#	Now: Set previous frame to current frame and RETURN.

		LDR		R2		FP			# Return Address Pointed to by FP
									# LOAD	FP, (FP-4) --> Point at previous activation record => (FP = PFP)
		ADI		FP		-4
		LDR		FP		FP		# ??? Probably wrong..

		JMR		R2				# <<--	Jump to return address in R2...


								# PARAMETERS ARE PASSED LEFT TO RIGHT. POSSIBLE TO GO OPPOSITE.

														############################
														# SP		==>  |_________|
														# FP -24	==>	 |__temp2__|
														# FP -20	==>	 |__temp1__|
														# FP -16	==>	 |____K____|
														# FP -12	==>	 |____J____|
														# FP -8		==>	 |____I____|
														# FP -4		==>	 |___PFP___|
														# FP		==>  |_RtnAddr_|
														############################
#########################################################						####						
		
flush	SUB		R1		R1
		STR		R1		data
		TRP		4
		STB		R3		c
floop	SUB		R2		R2
		STR		R2		newline
		CMP		R2		R3
		BRZ		R2		f_end
		TRP		4
		STB		R3		c
		JMP		floop
~flush	MOV		R4		FP
		ADI		R4		4
		LDR		PC		R4
		






















######################################################################

	### NEXT PART ###

# Test for OVERFLOW  (SP < SL)
#
# Create Activation Record and invoke function F(x, y).

		MOV		R2		FP		#	<--- Save FP in R2, this will be the PFP...
		MOV		FP		SP		#	<--- Point at current activation record... (FP = SP)
		ADI		SP		-4		#	<--- Adjust stack pointer to the NEW TOP (Return Address)...
		STR		R2		SP		#	PFP to Top of Stack (PFP = FP)...
		ADI		SP		-4		#	Adjust stack pointer to New Top
	# Passed Parameters onto the stack (pass by value)
		#........!
		LDA		R4		s
		STR		R4		SP
		ADI		SP		-4		# places s on the stack

		LDA		R4		k		
		STR		R4		SP
		ADI		SP		-4		# places the k on the stack

		LDA		R4		j
		STR		R4		SP
		ADI		SP		-4		# places the j on the stack

		MOV		R1		PC		# PC incremented by 1 instruction...
		ADI		R1		6		# Compute Return Address (always that fixed amount of 6..)
		STR		R1		FP		# return address to the beginning of the frame.

		JMP		opv_AR			# call function opv_AR
#	.......		# Instruction where we return.



#passed parameters onto the stack
		LDA		R5		s				# param1 - char
		STB		R5		SP
		ADI		SP		-1
		LDA		R5		k				# param2 - int
		STR		R5		SP
		ADI		SP		-4
		LDA		R5		j				# param3 - char
		STB		R5		SP
		ADI		SP		-1
#local variables
		LDR		R5		zero
		STR		R5		SP
		ADI		SP		-4

		MOV		R1		PC
		ADI		R1		6
		STR		R1		FP
		JMP		opd
#		TRP		99						#####MAKE SURE TO GET RID OF THESE
#		TRP		99
		JMP		UNDERFLOW






opd		ADI		SP		-10				#space for local (int t) and temp variables for (char s), (int k), and (char j)
		MOV		R7		FP
		ADI		R7		-10				#access j
		MOV		R6		FP
		ADI		R6		-9				#access k
		MOV		R5		FP
		ADI		R5		-5				#access s
#		TRP		99
#perform remaining operations in function
		#ADD	R5		R6
		#MOV	R4		FP
		#ADI	R4		-16
		#STR	R5		R4

		LDB		R3		R7
		TRP		3
		LDR		R3		R6
		TRP		1
		LDB		R3		R5
		TRP		3
		TRP		99

		MOV		SP		FP				#de-allocate current activation record (SP=FP)
		CMP		SP		SB				# 0 (SP=SB), Pos (SP>SB), Neg (SP<SB)
	#	BGT		R5		UNDERFLOW

		LDR		R5		FP				#return address pointed to by FP
		ADI		FP		-4				#point at previous activation record (FP=PFP)
		JMR		R5						#jump to address in register R5


#		MOV		R5		SP
#		ADI		R5		-8				#adjust for space needed (return address and PFP)
#		CMP		R5		SL				# 0 (SP=SL), Pos (SP>SL), Neg (SP<SL)
	#	BLT		R5		OVERFLOW
		
#		MOV		R3		FP				#save FP in R3, this will be the PFP
#		MOV		FP		SP				#point at current activation record
#		ADI		SP		-4				#adjust stack pointer for return address
#		STR		R3		SP				#PFP to top of stack
#		ADI		SP		-4				#adjust stack pointer for PFP
#		MOV		R1		PC				#PC incremented by 1 instruction
#		ADI		R1		6				#compute return address (always fixed amount)
#		STR		R1		FP				#return address to beginning of frame
	#	JMP		flush					#call function



#flush	MOV		SP		FP
#		MOV		R5		SP
#		CMP		R5		SB
#		BGT		R5		UNDERFLOW

#		LDR		R5		FP
#		ADI		FP		-4
#		JMR		R5



# *********************************************************************************************************
# *********************************************************************************************************
# *********************************************************************************************************
# *********************************************************************************************************

									# test for OVERFLOW...
									# flush() has no local parameters/variables.
		MOV		R5		SP
		ADI		R5		-8			# This has computed space for the return address and the PFP.
		CMP		R5		SL
		BLT		R5		OVERFLOW

									# create the activation record....
		MOV		R3		FP			# Save FP in R3, which will be the PFP...
		MOV		FP		SP			# setting FP to SP... So we know the current activation record.

									# adjust stack pointer for the return addres...
		ADI		SP		-4		
		STR		R3		SP			# PFP -> top of stack.
		ADI		SP		-4			# set stack pointer to PFP

									# increment PC by one instruction, compute return address and call the function...
		MOV		R1		PC
		ADI		R1		6
		STR		R1		FP

		JMP		flush
####	...		...		...		instruction where we return!

									####	DE-ALLOCATION
									####	DE-ALLOCATION
									####	DE-ALLOCATION

####	...		...		...		de-allocation happens after we get the return value from 'flush()'

		MOV		SP		FP			# Gotta check for UNDERFLOW this time...
		MOV		R5		SP
		CMP		R5		SB
		BGT		R5		UNDERFLOW

		LDR		R5		FP			# This loads the RETURN ADDRESS (from FP) into R5
									
									# and then move the stack pointers - setting previous frame to current frame... then we return!
		
####	...		...		...		I think this has to be different...
		LDR		R2		FP
		ADI		R2		-4			# THIS is to move the FP to the previous activation record, so we can jump to the next function and have our 
		LDR		FP		R2			# previous activation record the current record we are jumping from.
####	...		...		...		

		JMR		R5					# Jump to return address stored in R5...





# *********************************************************************************************************
# *********************************************************************************************************
# *********************************************************************************************************
# *********************************************************************************************************

#		TRP		2
	#	MOV		R1		R3
#		TRP		1		
	#	LDB		R3		newLine
#		TRP		3
#		TRP		4
	#	MOV		R2		R3
	#	TRP		3

		LDB		R3		newLine
		TRP		3
		TRP		3
		TRP		3
		LDB		R3		ccc
		TRP		3
		TRP		3
		LDB		R3		newLine
		TRP		3
		TRP		3
		TRP		3
		LDB		R3		ccc
		TRP		3
		TRP		3

		
	#	LDB		R3		newLine
#		TRP		3






		TRP		0




#Main		

OVERFLOW	LDB		R3		newLine
			TRP		3
			TRP		3
			TRP		3
			LDB		R3		oo
			TRP		3
			LDB		R3		vv
			TRP		3
			LDB		R3		ee
			TRP		3
			LDB		R3		rr
			TRP		3	
			LDB		R3		ff
			TRP		3
			LDB		R3		ll
			TRP		3
			LDB		R3		oo
			TRP		3
			LDB		R3		ww
			TRP		3					
			LDB		R3		newLine
			TRP		3
			TRP		3

UNDERFLOW	LDB		R3		newLine
			TRP		3
			TRP		3
			TRP		3
			LDB		R3		uu
			TRP		3
			LDB		R3		nn
			TRP		3
			LDB		R3		dd
			TRP		3
			LDB		R3		ee
			TRP		3
			LDB		R3		rr
			TRP		3			
			LDB		R3		ff
			TRP		3
			LDB		R3		ll
			TRP		3
			LDB		R3		oo
			TRP		3
			LDB		R3		ww
			TRP		3					
			LDB		R3		newLine
			TRP		3
			TRP		3
END			TRP		0

uu			.BYT	'u'
nn			.BYT	'n'
dd			.BYT	'd'
ee			.BYT	'e'
rr			.BYT	'r'
ff			.BYT	'f'
ll			.BYT	'l'
oo			.BYT	'o'
ww			.BYT	'w'
vv			.BYT	'v'





zero		.INT	0
SIZE		.INT	7
cnt			.INT
tenth		.INT
c			.BYT
			.BYT
			.BYT
			.BYT
			.BYT
			.BYT
			.BYT
data		.INT
flag		.INT
opdv		.INT				# opd()'s accumulator

s			.BYT	'q'			
k			.INT	9
j			.BYT	'v'			# convert j to an integer if possible

ccc			.BYT	'k'
newLine		.BYT	'\n'